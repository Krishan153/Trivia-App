{"ast":null,"code":"var _jsxFileName = \"/Users/krishanroy/Desktop/Tandom/src/App.js\";\nimport React, { useState } from 'react';\nexport default function App() {\n  const questions = [{\n    questionText: 'What was Tandem previous name?',\n    answerOptions: [{\n      answerText: 'Tandem',\n      isCorrect: false\n    }, {\n      answerText: 'Burger Shack',\n      isCorrect: false\n    }, {\n      answerText: 'Extraordinary Humans',\n      isCorrect: false\n    }, {\n      answerText: 'Devmynd',\n      isCorrect: true\n    }]\n  }, {\n    questionText: \"In Shakespeare's play Julius Caesar, Caesar's last words were...\",\n    answerOptions: [{\n      answerText: 'Iacta alea est!',\n      isCorrect: false\n    }, {\n      answerText: 'Vidi, vini, vici',\n      isCorrect: false\n    }, {\n      answerText: 'Aegri somnia vana',\n      isCorrect: false\n    }, {\n      answerText: 'Et tu, Brute?',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }]; //To dynamically change the question being returned\n\n  const [displayQuestion, setDisplayQuestion] = useState(0); //To show the score, and to dynamically change the showScore in the return function\n\n  const [showScore, rollingQuestions] = useState(false);\n  const [score, setScore] = useState(0); //To go to the next question\n\n  const afterAnswer = isCorrect => {\n    if (isCorrect === true) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = displayQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setDisplayQuestion(nextQuestion);\n    } else {\n      //Help bring us to the results page\n      rollingQuestions(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }\n  }, showScore ?\n  /*#__PURE__*/\n  //If showScore is true, display the result screen\n  React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, \"You scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }\n  }, \"Question \", displayQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, questions[displayQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }\n  }, questions[displayQuestion].answerOptions.map(answerOptions =>\n  /*#__PURE__*/\n  //By passing the booleon from the answerOptions, we can now keep track of if the answer is correct after the user clicks their choice\n  React.createElement(\"button\", {\n    onClick: () => afterAnswer(answerOptions.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }\n  }, answerOptions.answerText)))));\n}","map":{"version":3,"sources":["/Users/krishanroy/Desktop/Tandom/src/App.js"],"names":["React","useState","App","questions","questionText","answerOptions","answerText","isCorrect","displayQuestion","setDisplayQuestion","showScore","rollingQuestions","score","setScore","afterAnswer","nextQuestion","length","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nexport default function App() {\n\tconst questions = [\n\t\t{\n\t\t\tquestionText: 'What was Tandem previous name?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Tandem', isCorrect: false },\n\t\t\t\t{ answerText: 'Burger Shack', isCorrect: false },\n\t\t\t\t{ answerText: 'Extraordinary Humans', isCorrect: false },\n\t\t\t\t{ answerText: 'Devmynd', isCorrect: true },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: \"In Shakespeare's play Julius Caesar, Caesar's last words were...\",\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Iacta alea est!', isCorrect: false },\n\t\t\t\t{ answerText: 'Vidi, vini, vici', isCorrect: false },\n\t\t\t\t{ answerText: 'Aegri somnia vana', isCorrect: false },\n\t\t\t\t{ answerText: 'Et tu, Brute?', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'The iPhone was created by which company?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Apple', isCorrect: true },\n\t\t\t\t{ answerText: 'Intel', isCorrect: false },\n\t\t\t\t{ answerText: 'Amazon', isCorrect: false },\n\t\t\t\t{ answerText: 'Microsoft', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'How many Harry Potter books are there?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: '1', isCorrect: false },\n\t\t\t\t{ answerText: '4', isCorrect: false },\n\t\t\t\t{ answerText: '6', isCorrect: false },\n\t\t\t\t{ answerText: '7', isCorrect: true },\n\t\t\t],\n\t\t},\n\t];\n\n\t//To dynamically change the question being returned\n\tconst [displayQuestion, setDisplayQuestion] = useState(0);\n\n\t//To show the score, and to dynamically change the showScore in the return function\n\tconst [showScore, rollingQuestions] = useState(false);\n\n\tconst [score, setScore] = useState(0);\n\n\t//To go to the next question\n\tconst afterAnswer = (isCorrect) => {\n\t\tif(isCorrect === true){\n\t\t\tsetScore(score + 1);\n\t\t}\n\n\t\tconst nextQuestion = displayQuestion + 1;\n\t\tif(nextQuestion < questions.length){\n\t\t\tsetDisplayQuestion(nextQuestion);\n\t\t} else {\n\t\t\t//Help bring us to the results page\n\t\t\trollingQuestions(true);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t{showScore ? (\n\t\t\t\t//If showScore is true, display the result screen\n\t\t\t\t<div className='score-section'>You scored {score} out of {questions.length}</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t<span>Question {displayQuestion + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='question-text'>{questions[displayQuestion].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{questions[displayQuestion].answerOptions.map((answerOptions) => (\n\t\t\t\t\t\t\t//By passing the booleon from the answerOptions, we can now keep track of if the answer is correct after the user clicks their choice\n\t\t\t\t\t\t\t<button onClick={() => afterAnswer(answerOptions.isCorrect)}>{answerOptions.answerText}</button>))} \n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}